#!/usr/bin/env python
# DLCoal Reconciliation

import sys, os
from os.path import dirname
import optparse

# import dlcoal library
try:
    import dlcoal
except ImportError:
    sys.path.append(dirname(dirname(sys.argv[0])))
    import dlcoal

# import rasmus, compbio libs
from rasmus import util,  treelib, svg
from rasmus.vis import treesvg
from compbio import phylo


#=============================================================================
# options

o = optparse.OptionParser()
o.add_option("-s", "--stree", dest="stree", metavar="SPECIES_TREE")
o.add_option("-g", "--gentime", dest="gentime", metavar="GENRATION_TIME",
             type="float")
o.add_option("-v", "--viewer", dest="viewer", metavar="SVG_VIEWER",
             default="display")
o.add_option("-x", "--xscale", dest="xscale", metavar="BRANCH_LENGTH_SCALE")
o.add_option("-l", "--log", dest="log", metavar="DLCOAL_LOG_FILE")

o.add_option("-d", "--noduploss", dest="noduploss", action="store_true")
o.add_option("-c", "--nocoal", dest="nocoal", action="store_true")


g = optparse.OptionGroup(o, "Miscellaneous")
g.add_option("-S", "--smap", dest="smap", metavar="GENE_TO_SPECIES_MAP")
g.add_option("-n", "--popsize", dest="popsize", metavar="POPULATION_SIZE",
             type="float")
g.add_option("-D", "--duprate", dest="duprate", metavar="DUPLICATION_RATE",
             type="float")
g.add_option("-L", "--lossrate", dest="lossrate", metavar="LOSS_RATE",
             type="float")


conf, args = o.parse_args()


#=============================================================================

def draw_dlcoal_recon(
    coal_tree, coal_recon,
    locus_tree, locus_recon, locus_events, stree,
    
    xscale=100, yscale=20, minlen=0, maxlen=util.INF,
    locus_recon_color = (1, 0, 0, .5),
    coal_recon_color = (0, 0, 1, .2),
    
    colormap=None,
    rmargin=150, lmargin=10, tmargin=0, bmargin=None,
    font_size=10, leaf_padding=10, label_offset=None,
    label_size=None,
    filename=sys.stdout):

    # set defaults
    font_ratio = 8. / 11.
    
    if label_size is None:
        label_size = .7 * font_size
    
    if label_offset == None:
        label_offset = -1
    
    if bmargin == None:
        bmargin = yscale
    
    if sum(x.dist for x in stree.nodes.values()) == 0:
        legend_scale = False
        minlen = xscale
    
    #if colormap == None:
    #    for node in stree:
    #        node.color = (0, 0, 0)
    #else:
    #    colormap(stree)

    
    # layout stree
    stree_layout = treelib.layout_tree(stree, xscale, yscale, minlen, maxlen,
                                       rootx=lmargin, rooty=tmargin)
    xcoords, ycoords = zip(* stree_layout.values())
    maxwidth = max(xcoords)
    maxheight = max(ycoords) + label_offset

    # layout locus_tree
    locus_tree_layout = treelib.layout_tree(
        locus_tree, xscale, yscale, minlen, maxlen,
        rootx=lmargin)
    xcoords, ycoords = zip(* locus_tree_layout.values())
    maxwidth2 = max(xcoords)
    maxheight2 = max(ycoords) + label_offset

    # layout coal_tree
    coal_tree_layout = treelib.layout_tree(
        coal_tree, xscale, yscale, minlen, maxlen,
        rootx=lmargin)
    xcoords, ycoords = zip(* coal_tree_layout.values())
    maxwidth3 = max(xcoords)
    maxheight3 = max(ycoords) + label_offset

    maxwidth_all = max(maxwidth, maxwidth2, maxwidth3)

    # move stree_layout horizontally
    for node, (x, y) in stree_layout.iteritems():
        stree_layout[node] = (x-maxwidth+maxwidth_all, y)

    # move locus_tree_layout below stree_layout
    for node, (x, y) in locus_tree_layout.iteritems():
        locus_tree_layout[node] = (x-maxwidth2+maxwidth_all, y+maxheight)

    # move coal_tree_layout below stree_layout
    for node, (x, y) in coal_tree_layout.iteritems():
        coal_tree_layout[node] = (x-maxwidth3+maxwidth_all,
                                  y+maxheight+maxheight2)



    
    canvas = svg.Svg(util.open_stream(filename, "w"))
    width = int(rmargin + max(maxwidth, maxwidth2, maxwidth3))
    height = int(maxheight + maxheight2 + maxheight3 + bmargin)
    canvas.beginSvg(width, height)


    # draw stree
    treesvg.draw_tree(stree, layout=stree_layout,
                      xscale=xscale, yscale=yscale,
                      canvas=canvas,
                      tmargin=0, lmargin=0)

    # draw locus tree
    treesvg.draw_tree(locus_tree, layout=locus_tree_layout,
                      xscale=xscale, yscale=yscale,
                      tmargin=0, lmargin=0,
                      canvas=canvas)

    # draw coal tree
    treesvg.draw_tree(coal_tree, layout=coal_tree_layout,
                      xscale=xscale, yscale=yscale,
                      tmargin=0, lmargin=0,
                      canvas=canvas)

    # draw locus recon
    draw_recon(canvas, locus_recon, locus_events,
               locus_tree_layout, stree_layout,
               color=locus_recon_color)

    
    # draw coal recon
    draw_recon(canvas, coal_recon, None,
               coal_tree_layout, locus_tree_layout,
               color=coal_recon_color, deepcoal=True)

    
    canvas.endSvg()


def draw_tree_recon(
    locus_tree, locus_recon, locus_events, stree,
    xscale=100, yscale=20, minlen=0, maxlen=util.INF,

    deepcoal=False,
    events2=None,
    recon_color = (1, 0, 0, .5),
    colormap=None,
    rmargin=150, lmargin=10, tmargin=0, bmargin=None,
    font_size=10, leaf_padding=10, label_offset=None,
    label_size=None,
    filename=sys.stdout):

    # set defaults
    font_ratio = 8. / 11.
    
    if label_size is None:
        label_size = .7 * font_size
    
    if label_offset == None:
        label_offset = -1
    
    if bmargin == None:
        bmargin = yscale
    
    if sum(x.dist for x in stree.nodes.values()) == 0:
        legend_scale = False
        minlen = xscale
    
    #if colormap == None:
    #    for node in stree:
    #        node.color = (0, 0, 0)
    #else:
    #    colormap(stree)

    
    # layout stree
    stree_layout = treelib.layout_tree(stree, xscale, yscale, minlen, maxlen,
                                       rootx=lmargin, rooty=tmargin)
    xcoords, ycoords = zip(* stree_layout.values())
    maxwidth = max(xcoords)
    maxheight = max(ycoords) + label_offset

    # layout locus_tree
    locus_tree_layout = treelib.layout_tree(
        locus_tree, xscale, yscale, minlen, maxlen,
        rootx=lmargin)
    xcoords, ycoords = zip(* locus_tree_layout.values())
    maxwidth2 = max(xcoords)
    maxheight2 = max(ycoords) + label_offset

    
    maxwidth_all = max(maxwidth, maxwidth2)

    # move stree_layout horizontally
    for node, (x, y) in stree_layout.iteritems():
        stree_layout[node] = (x-maxwidth+maxwidth_all, y)

    # move locus_tree_layout below stree_layout
    for node, (x, y) in locus_tree_layout.iteritems():
        locus_tree_layout[node] = (x-maxwidth2+maxwidth_all, y+maxheight)

    
    canvas = svg.Svg(util.open_stream(filename, "w"))
    width = int(rmargin + max(maxwidth, maxwidth2))
    height = int(maxheight + maxheight2 + bmargin)
    canvas.beginSvg(width, height)


    # draw stree
    treesvg.draw_tree(stree, layout=stree_layout,
                      xscale=xscale, yscale=yscale,
                      canvas=canvas,
                      tmargin=0, lmargin=0)

    # draw locus tree
    treesvg.draw_tree(locus_tree, layout=locus_tree_layout,
                      xscale=xscale, yscale=yscale,
                      tmargin=0, lmargin=0,
                      canvas=canvas)

    # draw locus recon
    draw_recon(canvas, locus_recon, locus_events,
               locus_tree_layout, stree_layout,
               color=recon_color, deepcoal=deepcoal)


    if events2:
        draw_events(canvas, events2, stree_layout)
    
    canvas.endSvg()


def draw_recon(canvas, recon, events, tree1_layout, tree2_layout,
               dot_size=5, deepcoal=False,
               color=(1, 0, 0, .5)):
    arch = 20

    for node1, (x1, y1) in tree1_layout.iteritems():
        if node1.is_leaf():
            continue
        
        node2 = recon[node1]
        x4, y4 = tree2_layout[node2]

        if events is None:
            x4 = min(x1, x4)
            if node2.parent:
                x4 = max(x4, tree2_layout[node2.parent][0])
        elif events[node1] == "dup":
            x4 = min(x1, x4)
            if node2.parent:
                x4 = max(x4, tree2_layout[node2.parent][0])
            m = dot_size
            canvas.rect(x1-m, y1-m, 2*m, 2*m, fillColor=color,
                        strokeColor=None)

        if deepcoal and len(node1.leaves()) != len(node2.leaves()):
            m = dot_size
            canvas.rect(x1-m, y1-m, 2*m, 2*m, fillColor=color,
                        strokeColor=None)

        x2 = (x1*.5 + x4*.5) - arch
        y2 = (y1*.5 + y4*.5)
        x3 = (x1*.5 + x4*.5) - arch
        y3 = (y1*.5 + y4*.5)

        #canvas.line(x1, y1, x2, y2, color=color)
        canvas.write("<path d='M%f %f C%f %f %f %f %f %f' %s />\n " %
                     (x1, y1, x2, y2,
                      x3, y3, x4, y4,
                      svg.colorFields(color, (0,0,0,0))))


def draw_events(canvas, events, tree_layout,
                dot_size=5, color=(1, 0, 0, .5)):

    for node, (x, y) in tree_layout.iteritems():
        if events[node] == "dup":
            m = dot_size
            canvas.rect(x-m, y-m, 2*m, 2*m, fillColor=color,
                        strokeColor=None)

            

def show_data_files(prefix, stree,
                    locus_recon_color = (1, 0, 0, .5),
                    coal_recon_color = (0, 0, 1, .2)):

    locus_tree = treelib.read_tree(prefix + ".locus.tree")

    if stree:
        locus_recon, locus_events = phylo.read_recon_events(
            prefix + ".locus.recon", locus_tree, stree)
    else:
        locus_recon = None
        locus_events = None

    if not conf.nocoal:
        coal_tree = treelib.read_tree(prefix + ".coal.tree")
        coal_recon, coal_events = phylo.read_recon_events(
            prefix + ".coal.recon", coal_tree, locus_tree)

        treelib.reorder_tree(coal_tree, locus_tree, reroot=False)

    if conf.xscale is None:
        try:
            times = treelib.get_tree_timestamps(locus_tree)
            conf.xscale = 400.0 / times[locus_tree.root]
        except:
            conf.xscale = 1.0


    stream = os.popen(conf.viewer, "w")
    if conf.nocoal:
        draw_tree_recon(locus_tree, locus_recon, locus_events, stree,
                        xscale=conf.xscale, filename=stream,
                        locus_recon_color=locus_recon_color,
                        recon_color=locus_recon_color)
        
    elif conf.noduploss:
        
        draw_tree_recon(coal_tree, coal_recon, None, locus_tree,
                        xscale=conf.xscale, filename=stream,
                        recon_color=coal_recon_color, deepcoal=True,
                        events2=locus_events)
        
    else:
        draw_dlcoal_recon(coal_tree, coal_recon,
                          locus_tree, locus_recon, locus_events, stree,
                          xscale=conf.xscale, filename=stream,
                          locus_recon_color=locus_recon_color,
                          coal_recon_color=coal_recon_color)
    
    stream.close()


def parse_recon(recon_list, events_list, tree1, tree2):
    recon = {}
    for a, b in recon_list:
        recon[tree1.nodes[a]] = tree2.nodes[b]

    events = {}
    for a, b in events_list:
        events[tree1.nodes[a]] = b

    return recon, events
    

def show_log(data, coal_tree, stree,
             locus_recon_color = (1, 0, 0, .5),
             coal_recon_color = (0, 0, 1, .2)):

    locus_tree = treelib.parse_newick(data["locus_tree"])

    if stree:
        locus_recon, locus_events = parse_recon(data["locus_recon"],
                                                data["locus_events"],
                                                locus_tree, stree)

    if not conf.nocoal:
        coal_recon, coal_events = parse_recon(data["coal_recon"], [],
                                              coal_tree, locus_tree)
        treelib.reorder_tree(coal_tree, locus_tree, reroot=False)

    if conf.xscale is None:
        try:
            times = treelib.get_tree_timestamps(locus_tree)
            conf.xscale = 400.0 / times[locus_tree.root]
        except:
            conf.xscale = 1.0


    stream = os.popen(conf.viewer, "w")
    if conf.nocoal:
        draw_tree_recon(locus_tree, locus_recon, locus_events, stree,
                        xscale=conf.xscale, filename=stream,
                        locus_recon_color=locus_recon_color,
                        recon_color=locus_recon_color)
        
    elif conf.noduploss:
        draw_tree_recon(coal_tree, coal_recon, None, locus_tree,
                        xscale=conf.xscale, filename=stream,
                        recon_color=coal_recon_color, deepcoal=True,
                        events2=locus_events)
        
    else:
        draw_dlcoal_recon(coal_tree, coal_recon,
                          locus_tree, locus_recon, locus_events, stree,
                          xscale=conf.xscale, filename=stream,
                          locus_recon_color=locus_recon_color,
                          coal_recon_color=coal_recon_color)
    stream.close()


#=============================================================================
# read inputs

#duprate = conf.duprate / (1e6 / conf.gentime)
#lossrate = conf.lossrate / (1e6 / conf.gentime)

if not conf.noduploss or conf.stree:
    stree = treelib.read_tree(conf.stree)

    # convert species tree into generations
    for node in stree:
        node.dist *= 1e6 / conf.gentime
else:
    stree = None

if conf.log is not None:
    coal_tree = treelib.read_tree(
        util.replace_ext(conf.log, ".log", ".coal.tree"))
    for i, data in enumerate(dlcoal.read_log(conf.log)):
        print "displaying iteration", i
        show_log(data, coal_tree, stree)
        
else:
    for prefix in args:
        show_data_files(prefix, stree)

