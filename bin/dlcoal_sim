#!/usr/bin/env python
# DLCoal Simulation

# python imports
import sys
from os.path import dirname
import optparse

# import dlcoal library
try:
    import dlcoal
except ImportError:
    sys.path.append(dirname(dirname(sys.argv[0])))
    import dlcoal

# import rasmus, compbio libs
from rasmus import util,  treelib
from compbio import phylo

import dlcoal.sim

#=============================================================================
# options

o = optparse.OptionParser()
o.add_option("-o", "--outputdir", dest="outputdir",
             metavar="OUTPUT_DIR", default="simulations",
             help="output directory for simulation files")
o.add_option("-s", "--stree", dest="stree", metavar="SPECIES_TREE",
             help="species tree file in newick format (myr)")
o.add_option("-n", "--popsize", dest="popsize", metavar="POPULATION_SIZE",
             type="float",
             help="effective population size")
o.add_option("-D", "--duprate", dest="duprate", metavar="DUPLICATION_RATE",
             type="float",
             help="rate of a gene duplication (dups/gene/myr)")
o.add_option("-L", "--lossrate", dest="lossrate", metavar="LOSS_RATE",
             type="float",
             help="rate of gene loss (losses/gene/myr)")             
o.add_option("-g", "--gentime", dest="gentime", metavar="GENERATION_TIME",
             type="float",
             help="generation time (years)")             
o.add_option("", "--nsamples", dest="nsamples", metavar="NUMBER_OF_SAMPLES",
             type="int",
             help="number of samples per locus")
o.add_option("-i", "--iter", dest="iter", metavar="NUMBER_OF_SIMULATION",
             type="int", default=1,
             help="number of simulated gene trees to create")
o.add_option("", "--minsize", dest="minsize", metavar="MIN_NUMBER_OF_LEAVES",
             type="int", default=0,
             help="minimum number of genes required per family")

conf, args = o.parse_args()


#=============================================================================
# read inputs

stree = treelib.read_tree(conf.stree)
outdir = conf.outputdir

# get dup and loss rates
if conf.duprate is None:
    duprate = {}
    for node in stree:
        duprate[node.name] = float(node.data["duprate"])
else:
    duprate = conf.duprate
if conf.lossrate is None:
    lossrate = {}
    for node in stree:
        lossrate[node.name] = float(node.data["lossrate"])
else:
    lossrate = conf.lossrate

# get tree times
times = treelib.get_tree_timestamps(stree)

# get popsizes
#  NOTE: popsize is multiplied by 2 to account for diploid species
if conf.popsize is None:
    # scale popsizes by generation time
    popsizes = {}
    for node in stree:
        popsizes[node.name] = (2 * float(node.data["pop"]) *
                                   float(node.data["g"]) / 1e6)
else:
    popsizes = 2 * conf.popsize * conf.gentime / 1e6

# get sample sizes
if conf.nsamples is not None:
    leaf_counts = dict((l, conf.nsamples) for l in stree.leaf_names())
else:
    leaf_counts = {}
    for node in stree:
        try:
            leaf_counts[node.name] = int(node.data["nsamples"])
        except:
            leaf_counts[node.name] = 1
    

#=============================================================================
# perform simulations

dlcoal.sim.dlcoal_sims(
    outdir, conf.iter, stree, popsizes, duprate, lossrate,
    leaf_counts=leaf_counts,
    minsize=conf.minsize)


